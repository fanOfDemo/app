{"version":3,"sources":["component/WriteBlog.jsx","component/BlogDetail.jsx","pages/HelloTypeScript.jsx","App.js","serviceWorker.js","index.js"],"names":["WriteBlog","props","handleChange","bind","state","editorValue","imageUrl","value","this","console","log","setState","className","subfield","preview","onChange","React","Component","BlogDetail","content","con","source","HelloTypeScript","prop","routes","path","component","App","map","page","index","key","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAsCeA,E,keAlCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAEpB,EAAKC,MAAQ,CACXC,YAAa,GACbC,SAAU,IANK,E,yDASNC,GACNC,KAAKP,MAAMC,eACbO,QAAQC,IAAI,SAAWH,GACvBC,KAAKP,MAAMC,aAAaK,IAG3BC,KAAKG,SAAS,CACZN,YAAaE,M,+BAKP,IAAD,OACP,OACE,kBAAC,IAAD,CACEK,UAAU,YACVC,UAAU,EACVC,SAAS,EAETP,MAAOC,KAAKJ,MAAMC,YAClBU,SAAU,SAACR,GAAD,OAAW,EAAKL,aAAaK,W,GA9BvBS,IAAMC,W,4BCkBfC,E,keAfb,WAAYjB,GAAO,IAAD,6BAChB,cAAMA,GACNQ,QAAQC,IAAI,EAAKT,MAAMkB,SAFP,E,gEAKE,IACRC,EAAQZ,KAAKP,MAAMkB,QAAnBC,IACVX,QAAQC,IAAIU,K,+BAKZ,OAAO,kBAAC,IAAD,CAAeC,OAAQb,KAAKP,MAAMkB,c,GAbpBH,IAAMC,W,IC8BhBK,E,keAzBb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAKRrB,aAAe,SAACK,GACdE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CACZJ,MAAOA,KAPT,EAAKH,MAAQ,CACXG,MAAO,IAHO,E,qDAehB,OACE,6BACE,6CACA,kBAAC,EAAD,CAAWL,aAAcM,KAAKN,eAC9B,6CACA,kBAAC,EAAD,CAAYiB,QAASX,KAAKJ,MAAMG,a,GArBVS,IAAMC,W,OCEpC,IAAMO,EAAS,CAEb,CAAEC,KAAM,IAAKC,UAAWJ,IA0BXK,E,ulBArBX,OACE,kBAAC,IAAD,KACE,6BACGH,EAAOI,KAAI,SAACC,EAAMC,GAAP,OACVD,EAAKH,UACH,kBAAC,IAAD,CACEK,IAAKD,EACLE,OAAK,EACLP,KAAMI,EAAKJ,KACXC,UAAWG,EAAKH,YAGhB,gB,GAdET,aCJEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAE,EAAF,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d1a8c9ac.chunk.js","sourcesContent":["import React from 'react'\nimport Editor from 'for-editor'\n\nclass WriteBlog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      editorValue: \"\",\n      imageUrl: \"\",\n    };\n  }\n  handleChange(value) {\n     if (this.props.handleChange) {\n       console.log(\"write:\" + value);\n       this.props.handleChange(value);\n     }\n\n    this.setState({\n      editorValue: value,\n    });\n   \n    \n  }\n  render() {\n    return (\n      <Editor\n        className=\"my-editor\"\n        subfield={true}\n        preview={true}\n        // addImg = {(file) => this.uploadHandler(file)}\n        value={this.state.editorValue}\n        onChange={(value) => this.handleChange(value)}\n      />\n    );\n  }\n}\nexport default WriteBlog;","import React from 'react'\nimport ReactMarkdown from \"react-markdown\";\n\nimport \"markdown-navbar/dist/navbar.css\";\n\nclass BlogDetail extends React.Component{\n  constructor(props){\n    super(props)\n    console.log(this.props.content);\n  }\n\n  componentDidMount(){\n      const { con } = this.props.content;\n    console.log(con);\n  }\n\n  render(){\n    \n    return <ReactMarkdown source={this.props.content} />;\n  }\n}\nexport default BlogDetail;","/*\n * @Description:\n * @Author: wengyiming\n * @Date: 2020-05-07 11:05:41\n */\nimport React from \"react\";\nimport WriteBlog from \"../component/WriteBlog\";\nimport BlogDetail from \"../component/BlogDetail\";\n\nclass HelloTypeScript extends React.Component {\n  constructor(prop) {\n    super(prop);\n    this.state = {\n      value: \"\",\n    };\n  }\n  handleChange = (value) => {\n    console.log(value);\n    this.setState({\n      value: value,\n    });\n  };\n\n\n  render() {\n    return (\n      <div>\n        <div>输入</div>\n        <WriteBlog handleChange={this.handleChange}></WriteBlog>\n        <div>输出</div>\n        <BlogDetail content={this.state.value} />\n      </div>\n    );\n  }\n}\nexport default HelloTypeScript;\n","/*\n * @Description:\n * @Author: wengyiming\n * @Date: 2020-01-06 13:46:48\n */\nimport React, { Component } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport HelloTypeScript from \"./pages/HelloTypeScript\";\n\nimport \"./App.css\";\n\nconst routes = [\n\n  { path: \"/\", component: HelloTypeScript },\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          {routes.map((page, index) =>\n            page.component ? (\n              <Route\n                key={index}\n                exact\n                path={page.path}\n                component={page.component}\n              />\n            ) : (\n                \"test\"\n              )\n          )}\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}