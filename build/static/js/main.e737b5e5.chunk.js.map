{"version":3,"sources":["component/FishChart.jsx","component/ProductChart.jsx","md/README.md","pages/HelloTypeScript.tsx","pages/Home.jsx","pages/About.jsx","App.js","serviceWorker.js","index.js"],"names":["FishChart","getOption","title","text","x","tooltip","trigger","xAxis","name","data","yAxis","type","series","echarts","init","document","getElementById","setOption","this","id","option","theme","style","width","height","React","Component","ProductChart","ReactMarkdown","require","HelloTypeScript","props","state","terms","termsFrPath","fetch","then","response","setState","source","escapeHtml","Home","routes","path","component","About","App","map","page","index","key","exact","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UAyDgBA,G,8OA3CdC,UAAY,WA0BV,MAzBa,CACXC,MAAO,CACLC,KAAM,mDACNC,EAAG,UAELC,QAAS,CACPC,QAAS,QAEXC,MAAO,CACLC,KAAM,eAENC,KAAM,CAAC,IAAK,IAAK,IAAK,MAExBC,MAAO,CACLF,KAAM,SACNG,KAAM,SAERC,OAAQ,CACN,CACEJ,KAAM,SACNG,KAAM,OACNF,KAAM,CAAC,IAAK,IAAK,IAAK,O,mFAzBdI,IAAQC,KAAKC,SAASC,eAAe,SAC3CC,UAAUC,KAAKjB,e,+BAgCvB,OACE,6BACE,yBACEkB,GAAG,OACHC,OAAQF,KAAKjB,YACboB,MAAM,QACNC,MAAO,CAAEC,MAAO,QAASC,OAAQ,gB,GAzCnBC,IAAMC,YC+CfC,G,kNA1Cb1B,UAAY,WAyBV,MAxBa,CACXC,MAAO,CACLC,KAAM,2BACNC,EAAG,UAELC,QAAS,CACPC,QAAS,QAEXC,MAAO,CACLC,KAAM,IACNC,KAAM,CAAC,IAAK,IAAK,IAAK,MAExBC,MAAO,CACLF,KAAM,IACNG,KAAM,SAERC,OAAQ,CACN,CACEJ,KAAM,2BACNG,KAAM,MACNF,KAAM,CAAC,IAAK,IAAK,IAAK,S,mFAxBdI,IAAQC,KAAKC,SAASC,eAAe,iBAC3CC,UAAUC,KAAKjB,e,+BA+BvB,OACE,6BACE,yBACEkB,GAAG,eACHC,OAAQF,KAAKjB,YACboB,MAAM,QACNC,MAAO,CAAEC,MAAO,QAASC,OAAQ,gB,GAxChBC,IAAMC,YCTlB,kFCMTE,EAAgBC,EAAQ,KAgCfC,E,YA3Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CAAEC,MAAOC,GAHL,E,kFAKG,IAAD,OACnBC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAcA,EAASlC,UAC5BiC,MAAK,SAACjC,GACL,EAAKmC,SAAS,CAAEL,MAAO9B,S,+BAI3B,OACE,6BACE,2FACA,4BACA,6BAEA,kBAACyB,EAAD,CACEW,OAAQrB,KAAKc,MAAMC,MACnBO,YAAY,S,GAtBQf,IAAMC,WCYrBe,E,8NAXX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAXWhB,IAAMC,WCGVe,E,iLAJX,OAAO,+C,GAFQhB,IAAMC,WCYnBgB,G,OAAS,CACb,CAAEC,KAAM,IAAKC,UAAWH,GACxB,CAAEE,KAAM,SAAUC,UAAWC,GAC7B,CAAEF,KAAM,MAAOC,UAAWd,KA0BbgB,E,iLArBX,OACE,kBAAC,IAAD,KACE,6BACGJ,EAAOK,KAAI,SAACC,EAAMC,GAAP,OACVD,EAAKJ,UACH,kBAAC,IAAD,CACEM,IAAKD,EACLE,OAAK,EACLR,KAAMK,EAAKL,KACXC,UAAWI,EAAKJ,YAGhB,gB,GAdElB,aCPE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAE,EAAF,MAAU3C,SAASC,eAAe,SD6H5C,kBAAmB2C,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.e737b5e5.chunk.js","sourcesContent":["import React from \"react\";\n\nimport echarts from \"echarts/lib/echarts\";\nimport \"echarts/lib/chart/line\"; //折线图是line,饼图改为pie,柱形图改为bar\nimport \"echarts/lib/component/tooltip\";\nimport \"echarts/lib/component/title\";\nimport \"echarts/lib/component/legend\";\nimport \"echarts/lib/component/markPoint\";\n\nclass FishChart extends React.Component {\n  componentDidMount() {\n    let myChart = echarts.init(document.getElementById(\"main\")); //初始化echarts\n    myChart.setOption(this.getOption());\n  }\n  getOption = () => {\n    let option = {\n      title: {\n        text: \"鱼和熊掌不可兼得\",\n        x: \"center\"\n      },\n      tooltip: {\n        trigger: \"axis\"\n      },\n      xAxis: {\n        name: \"熊掌\",\n\n        data: [\"0\", \"1\", \"2\", \"3\"]\n      },\n      yAxis: {\n        name: \"鱼\",\n        type: \"value\"\n      },\n      series: [\n        {\n          name: \"鱼\",\n          type: \"line\", //这块要定义type类型，柱形图是bar,饼图是pie\n          data: [600, 500, 300, 0]\n        }\n      ]\n    };\n    return option;\n  };\n\n  render() {\n    return (\n      <div>\n        <div\n          id=\"main\"\n          option={this.getOption()}\n          theme=\"Imooc\"\n          style={{ width: \"400px\", height: \"400px\" }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default  FishChart;","import React from \"react\";\n\nimport echarts from \"echarts/lib/echarts\";\nimport \"echarts/lib/chart/bar\"; //折线图是line,饼图改为pie,柱形图改为bar\nimport \"echarts/lib/component/tooltip\";\nimport \"echarts/lib/component/title\";\nimport \"echarts/lib/component/legend\";\nimport \"echarts/lib/component/markPoint\";\n\nclass ProductChart extends React.Component {\n  componentDidMount() {\n    let myChart = echarts.init(document.getElementById(\"productChart\")); //初始化echarts\n    myChart.setOption(this.getOption());\n  }\n  getOption = () => {\n    let option = {\n      title: {\n        text: \"机会成本\",\n        x: \"center\"\n      },\n      tooltip: {\n        trigger: \"axis\"\n      },\n      xAxis: {\n        name: \"A\",\n        data: [\"0\", \"1\", \"2\", \"3\"]\n      },\n      yAxis: {\n        name: \"B\",\n        type: \"value\"\n      },\n      series: [\n        {\n          name: \"机会成本\",\n          type: \"bar\", //这块要定义type类型，柱形图是bar,饼图是pie\n          data: [\"A\", \"B\", \"C\", \"D\"]\n        }\n      ]\n    };\n    return option;\n  };\n\n  render() {\n    return (\n      <div>\n        <div\n          id=\"productChart\"\n          option={this.getOption()}\n          theme=\"Imooc\"\n          style={{ width: \"400px\", height: \"400px\" }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ProductChart;","export default \"module.exports = __webpack_public_path__ + \\\"static/media/README.1c27cbcf.md\\\";\";","/*\n * @Description:\n * @Author: wengyiming\n * @Date: 2020-05-07 11:05:41\n */\nimport React from \"react\";\nconst ReactMarkdown = require(\"react-markdown/with-html\");\n\nimport termsFrPath from \"../md/README.md\";\n\nclass HelloTypeScript extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { terms: termsFrPath };\n  }\n  componentWillMount() {\n    fetch(termsFrPath)\n      .then((response) => response.text())\n      .then((text) => {\n        this.setState({ terms: text });\n      });\n  }\n  render() {\n    return (\n      <div>\n        <div>这个是TypeScript构建的组件</div>\n        <p />\n        <br />\n\n        <ReactMarkdown\n          source={this.state.terms}\n          escapeHtml={false}\n        ></ReactMarkdown>\n      </div>\n    );\n  }\n}\nexport default HelloTypeScript;\n","import React from \"react\";\nimport FishChart from '../component/FishChart';\nimport ProductChart from \"../component/ProductChart\";\nimport HelloTypeScript from \"../pages/HelloTypeScript.tsx\"\nclass Home extends React.Component {\n  componentDidMount(){\n    \n  }\n\n  \n  render() {\n    return (\n      <div>\n        <FishChart />\n        <ProductChart />\n        <HelloTypeScript/>\n        \n      </div>\n    );\n  }\n}\n\nexport default Home;","import React from \"react\";\nclass Home extends React.Component {\n  render() {\n    return <h1>Hello About</h1>;\n  }\n}\n\nexport default Home;","/*\n * @Description:\n * @Author: wengyiming\n * @Date: 2020-01-06 13:46:48\n */\nimport React, { Component } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport HelloTypeScript from \"./pages/HelloTypeScript.tsx\";\n\nimport \"./App.css\";\n\nconst routes = [\n  { path: \"/\", component: Home },\n  { path: \"/about\", component: About },\n  { path: \"/ty\", component: HelloTypeScript },\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          {routes.map((page, index) =>\n            page.component ? (\n              <Route\n                key={index}\n                exact\n                path={page.path}\n                component={page.component}\n              />\n            ) : (\n                \"test\"\n              )\n          )}\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}